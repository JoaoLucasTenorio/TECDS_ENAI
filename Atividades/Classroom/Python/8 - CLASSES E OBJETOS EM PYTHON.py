# -*- coding: utf-8 -*-
"""Lista de Atividades 8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wrUPW35JxC1bwMiXLKU-f3l7tWHUwUoQ

1. Crie uma classe que modele uma pessoa
(a) Atributos: nome, idade e endereço
(b) Metodos: mostrar endereço e alterar endereço.
"""

class Pessoa:
    def __init__(self, nome, idade, endereco):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco

    def mostrar_endereco(self):
        print(f"Endereço de {self.nome}: {self.endereco}")

    def alterar_endereco(self, novo_endereco):
        self.endereco = novo_endereco
        print(f"Endereço de {self.nome} alterado para: {self.endereco}")

nome = input("Digite o nome da pessoa: ")
idade = int(input("] a idade da pessoa: "))
endereco = input("Digite o endereço da pessoa: ")

pessoa_1 = Pessoa(nome, idade, endereco)

pessoa_1.mostrar_endereco()
novo_endereco = input("Digite o novo endereço: ")
pessoa_1.alterar_endereco(novo_endereco)
pessoa_1.mostrar_endereco()

"""2. Crie uma classe que modele uma aluno
(a) Atributos: nome, numero de matrıcula e curso
(b) Metodos: mostrar curso e alterar curso.
"""

class Aluno:
    def __init__(self, nome, matricula, curso):
        self.nome = nome
        self.matricula = matricula
        self.curso = curso

    def mostrar_curso(self):
        print(f"Curso de {self.nome}: {self.curso}")

    def alterar_curso(self, novo_curso):
        self.curso = novo_curso
        print(f"Curso de {self.nome} alterado para: {self.curso}")

nome = input("Digite o nome do aluno: ")
matricula = input("Digite o número de matrícula do aluno: ")
curso = input("Digite o curso do aluno: ")

aluno1 = Aluno(nome, matricula, curso)

aluno1.mostrar_curso()
novo_curso = input("Digite o novo curso: ")
aluno1.alterar_curso(novo_curso)
aluno1.mostrar_curso()

"""3. Crie uma classe representando os alunos de um determinado curso. A classe deve conter os atributos matrıcula do aluno, nome, nota da primeira prova, nota da segunda prova e nota da terceira prova. Crie metodos para acessar o nome e a media do aluno."""

class Aluno:
    def __init__(self, matricula, nome, nota1, nota2, nota3):
        self.matricula = matricula
        self.nome = nome
        self.nota1 = nota1
        self.nota2 = nota2
        self.nota3 = nota3

    def calcular_media(self):
        return (self.nota1 + self.nota2 + self.nota3) / 3

    def obter_nome(self):
        return self.nome

matricula = input("Digite a matrícula do aluno: ")
nome = input("Digite o nome do aluno: ")
nota1 = float(input("Digite a nota da primeira prova: "))
nota2 = float(input("Digite a nota da segunda prova: "))
nota3 = float(input("Digite a nota da terceira prova: "))

aluno1 = Aluno(matricula, nome, nota1, nota2, nota3)

print(f"Nome do aluno: {aluno1.obter_nome()}")
print(f"Média do aluno: {aluno1.calcular_media()}")

"""4. Crie uma classe para representar um horario (hora, minuto e segundo). Implemente os metodos para fazer as operacoes de incremento (de segundos) no horario e diferença entre dois horarios."""

class Horario:
    def __init__(self, hora, minuto, segundo):
        self.hora = hora
        self.minuto = minuto
        self.segundo = segundo

    def incrementar_segundos(self, segundos):
        total_segundos = self.hora * 3600 + self.minuto * 60 + self.segundo + segundos
        self.hora = total_segundos // 3600
        self.minuto = (total_segundos % 3600) // 60
        self.segundo = total_segundos % 60

    def calcular_diferenca(self, outro_horario):
        segundos_atual = self.hora * 3600 + self.minuto * 60 + self.segundo
        segundos_outro = outro_horario.hora * 3600 + outro_horario.minuto * 60 + outro_horario.segundo
        diferenca_segundos = abs(segundos_outro - segundos_atual)
        dif_horas = diferenca_segundos // 3600
        dif_minutos = (diferenca_segundos % 3600) // 60
        dif_segundos = diferenca_segundos % 60
        return dif_horas, dif_minutos, dif_segundos

hora = int(input("Digite a hora: "))
minuto = int(input("Digite o minuto: "))
segundo = int(input("Digite o segundo: "))

horario1 = Horario(hora, minuto, segundo)

segundos_para_incrementar = int(input("Digite quantos segundos deseja incrementar: "))
horario1.incrementar_segundos(segundos_para_incrementar)
print(f"Novo horário: {horario1.hora}:{horario1.minuto}:{horario1.segundo}")

hora2 = int(input("Digite a hora para calcular a diferença: "))
minuto2 = int(input("Digite o minuto para calcular a diferença: "))
segundo2 = int(input("Digite o segundo para calcular a diferença: "))
horario2 = Horario(hora2, minuto2, segundo2)
dif_horas, dif_minutos, dif_segundos = horario1.calcular_diferenca(horario2)
print(f"Diferença de tempo: {dif_horas} horas, {dif_minutos} minutos e {dif_segundos} segundos")

"""5. Crie uma classe que modele um carro
(a) Atributos: marca, ano e preco
(b) Metodos: mostrar preco e de exibicao dos dados  
"""

class Carro:
    def __init__(self, marca, ano, preco):
        self.marca = marca
        self.ano = ano
        self.preco = preco

    def mostrar_preco(self):
        print("Preço:", self.preco)

    def exibir_dados(self):
        print("Marca:", self.marca)
        print("Ano:", self.ano)
        self.mostrar_preco()


carro1 = Carro("Toyota", 2020, 50000)
carro1.exibir_dados()

"""6. Crie uma classe que modele um Tamagushi (Bichinho Eletrônico):Atributos: Nome, Fome, Saúde e Idade b. Métodos: Alterar Nome, Fome, Saúde e Idade; Retornar Nome, Fome, Saúde e Idade Obs: Existe mais uma informação que devemos levar em consideração, o Humor do nosso tamagushi, este humor é uma combinação entre os atributos Fome e Saúde, ou seja, um campo calculado, então não devemos criar um atributo para armazenar esta informação por que ela pode ser calculada a qualquer momento.

"""

class Tamagushi:
    def __init__(self, nome, fome, saude, idade):
        self.nome = nome
        self.fome = fome
        self.saude = saude
        self.idade = idade

    def alterar_nome(self, novo_nome):
        self.nome = novo_nome

    def alterar_fome(self, nova_fome):
        self.fome = nova_fome

    def alterar_saude(self, nova_saude):
        self.saude = nova_saude

    def alterar_idade(self, nova_idade):
        self.idade = nova_idade

    def retornar_nome(self):
        return self.nome

    def retornar_fome(self):
        return self.fome

    def retornar_saude(self):
        return self.saude

    def retornar_idade(self):
        return self.idade

    def calcular_humor(self):
        if self.fome <= 50 and self.saude >= 50:
            return "Feliz"
        else:
            return "Triste"


tamagushi1 = Tamagushi("Tama", 30, 60, 2)
print("Nome:", tamagushi1.retornar_nome())
print("Fome:", tamagushi1.retornar_fome())
print("Saúde:", tamagushi1.retornar_saude())
print("Idade:", tamagushi1.retornar_idade())
print("Humor:", tamagushi1.calcular_humor())

"""7. Desenvolva uma classe Macaco,que possua os atributos nome e bucho (estomago) e pelo menos os métodos comer(), verBucho() e digerir(). Faça um programa ou teste interativamente, criando pelo menos dois macacos, alimentando-os com pelo menos 3 alimentos diferentes e verificando o conteúdo do estomago a cada refeição. Experimente fazer com que um macaco coma o outro. É possível criar um macaco canibal?"""

class Macaco:
    def __init__(self, nome):
        self.nome = nome
        self.bucho = []

    def comer(self, alimento):
        if isinstance(alimento, Macaco):
            alimento.digerir()
            print(self.nome, "comeu", alimento.nome)
        else:
            self.bucho.append(alimento)

    def ver_bucho(self):
        print("Bucho do", self.nome + ":", self.bucho)

    def digerir(self):
        if self.bucho:
            comida = self.bucho.pop(0)
            print(self.nome, "digeriu", comida)
        else:
            print("Bucho do", self.nome, "está vazio.")



macaco1 = Macaco("Jorge")
macaco2 = Macaco("Ana")

macaco1.comer("Banana")
macaco1.comer("Maçã")
macaco1.comer("Pêssego")

macaco2.comer("Nozes")
macaco2.comer("Uvas")
macaco2.comer("Cenoura")

macaco1.ver_bucho()
macaco1.comer(macaco2)
macaco1.ver_bucho()
macaco1.digerir()
macaco1.ver_bucho()